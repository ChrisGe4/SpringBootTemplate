buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/libs-release-local" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

    }
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'


jar {
    baseName = 'bc-deploy-service'
    version = '0.0.1-SNAPSHOT'
}

compileJava {
    sourceCompatibility = 9
    targetCompatibility = 9
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}
dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR5'
    }
}
dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-integration")




    compile "org.springframework.boot:spring-boot-configuration-processor"
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-config-client'

    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    compile 'org.springframework.integration:spring-integration-file'
    compile 'org.springframework.batch:spring-batch-integration'


    testCompile("org.springframework.boot:spring-boot-starter-test")

}

//task wrapper(type: Wrapper) { gradleVersion = '1.12' }

/*
You need to add compileJava.dependsOn(processResources) to your build to ensure that resources are processed before code is compiled. Without this directive any additional-spring-configuration-metadata.json files will not be processed.
The processor will pick up both classes and methods that are annotated with @ConfigurationProperties. The Javadoc for field values within configuration classes will be used to populate the description attribute.

[Note]
You should only use simple text with @ConfigurationProperties field Javadoc since they are not processed before being added to the JSON.
 */
compileJava.dependsOn(processResources)

defaultTasks = ['clean', 'build']
